"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var utils_1 = require("./utils");
var SECOND = 1000;
var MINUTE = 60 * SECOND;
var defaultOptions = {
    stdout: process.stdout,
    formatOptions: {
        compact: true,
        breakLength: Infinity,
        colors: true,
    },
};
var Logger = /** @class */ (function () {
    function Logger(options) {
        this.timeOfLastCall = 0;
        this.options = __assign(__assign({}, defaultOptions), options);
    }
    Logger.prototype.debug = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        if (process.env.DEBUG) {
            this.log('DEBUG', this.format(params));
        }
    };
    Logger.prototype.log = function (level, message) {
        var tag = utils_1.colors.cyan(level);
        var time = utils_1.colors.gray(utils_1.timestamp());
        var elapsed = utils_1.colors.gray(this.getElapsedTime());
        var caller = utils_1.getCaller();
        caller = caller ? utils_1.colors.gray("(via " + caller + ")") : '';
        var line = ["[" + tag + "]", time, message, caller, elapsed].join(' ');
        process.stdout.write(line + "\n");
    };
    Logger.prototype.getElapsedTime = function () {
        if (!this.timeOfLastCall) {
            this.timeOfLastCall = new Date().getTime();
            return '';
        }
        var elapsed = new Date().getTime() - this.timeOfLastCall;
        var minutes = Math.floor(elapsed / MINUTE);
        var seconds = ((elapsed % MINUTE) / SECOND).toFixed(0);
        this.timeOfLastCall = new Date().getTime();
        return "+ " + (minutes ? minutes + "m" + seconds + "s" : seconds + "s");
    };
    Logger.prototype.format = function (params) {
        var _this = this;
        var output = '';
        params.forEach(function (value, i) {
            if (i !== 0) {
                output += ' ';
            }
            if (typeof value === 'string') {
                output += value;
            }
            else {
                output += util_1.inspect(utils_1.asJSON(value), _this.options.formatOptions);
            }
        });
        return output;
    };
    return Logger;
}());
exports.logger = new Logger();
