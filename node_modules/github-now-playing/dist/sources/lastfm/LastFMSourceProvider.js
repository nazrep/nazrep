"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = __importDefault(require("url"));
const querystring_1 = __importDefault(require("querystring"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const yanl_1 = require("yanl");
const SourceProvider_1 = require("../../SourceProvider");
class LastFMSourceProvider extends SourceProvider_1.SourceProvider {
    async getNowPlaying() {
        var _a, _b, _c, _d;
        const response = await node_fetch_1.default(this.recentTracksUrl);
        const payload = await response.json();
        yanl_1.logger.debug('api request to last.fm', response.status, response.statusText);
        const track = (_b = (_a = payload) === null || _a === void 0 ? void 0 : _a.recenttracks) === null || _b === void 0 ? void 0 : _b.track[0];
        if (((_d = (_c = track) === null || _c === void 0 ? void 0 : _c['@attr']) === null || _d === void 0 ? void 0 : _d.nowplaying) === 'true') {
            return {
                artist: track.artist['#text'],
                title: track.name,
            };
        }
        return null;
    }
    get recentTracksUrl() {
        return url_1.default.format({
            hostname: 'ws.audioscrobbler.com',
            pathname: '/2.0',
            protocol: 'http',
            search: querystring_1.default.stringify({
                api_key: this.options.apiKey,
                format: 'json',
                method: 'user.getrecenttracks',
                user: this.options.user,
            }),
        });
    }
}
exports.LastFMSourceProvider = LastFMSourceProvider;
