import { NowPlayingTrack } from './types';
import { SimpleEventEmitter } from './SimpleEventEmitter';
declare enum Events {
    Error = "error",
    TrackChanged = "track-changed",
    TrackStopped = "track-stopped"
}
declare type EventListeners = {
    [Events.Error](error: unknown): void;
    [Events.TrackChanged](track: NowPlayingTrack): void;
    [Events.TrackStopped](): void;
};
export declare abstract class SourceProvider<T = {}> extends SimpleEventEmitter<EventListeners> {
    protected options: T & {
        updateFrequency: number;
    };
    static Events: typeof Events;
    private state;
    private nextCheckTimeout;
    private lastTrack;
    constructor(options: T & {
        updateFrequency: number;
    });
    isListening(): boolean;
    listen(): void;
    stop(): void;
    protected getNowPlaying(): Promise<NowPlayingTrack | null>;
    private checkNowPlaying;
    private hasTrackChanged;
}
export {};
