import { SourceProvider } from './SourceProvider';
import { SimpleEventEmitter } from './SimpleEventEmitter';
import { NowPlayingStatus, StatusPublisher } from './types';
declare enum Events {
    Error = "error",
    ListenStart = "listen-start",
    ListenStop = "listen-stop",
    StatusCleared = "status-cleared",
    StatusUpdated = "status-updated"
}
declare type EventListeners<Status> = {
    [Events.Error](error: unknown): void;
    [Events.ListenStart](): void;
    [Events.ListenStop](): void;
    [Events.StatusCleared](): void;
    [Events.StatusUpdated](status: Status | null): void;
};
export declare class NowPlayingMonitor<Status extends NowPlayingStatus> extends SimpleEventEmitter<EventListeners<Status>> {
    private statusPublisher;
    /**
     * A dictionary containing event names for a GitHubNowPlaying instance
     */
    static Events: typeof Events;
    private isStatusDirty;
    private sourceProvider;
    private state;
    constructor(statusPublisher: StatusPublisher);
    /**
     * Listens to track changes using the provided source.
     */
    listen(): void;
    /**
     * Stop listening to track changes using the provided source. Calling this
     * will clear the profile status if it has been already updated.
     */
    stop(): Promise<void>;
    /**
     * Sets a source from which the currently playing track will be retrieved.
     */
    setSource(source: SourceProvider): void;
    private setSourceProvider;
    private unsetSourceProvider;
    private updateStatus;
    private clearStatus;
    private emitError;
    private cleanUp;
}
export {};
